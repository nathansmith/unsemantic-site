<%= render "/partials/vars" %>
<h1>
  Sass Documentation
</h1>
<p>
  If you want to use your own naming conventions, or if you're just curious to see how the Sass for Unsemantic works "under the hood," this page covers how <a href="http://sass-lang.com/">Sass</a> is been used to build the CSS output.
</p>
<hr />
<h2>
  Breakpoints
</h2>
<p>
  Within the <i>_unsemantic-grid-responsive.scss</i> file, three other Sass partials are assembled within media queries, to create a responsive CSS file. These partials can also be compiled together without a <code>@media</code> query (or compiled separately), for handling older IE versions.
</p>
<p>
  The <code>$media-mobile-max</code> variable is set to a default of 767px, and <code>$media-desktop-min</code> defaults to 768px. This 767|768 breakpoint is where the Unsemantic grid will pivot between a "mobile" or "desktop" layout.
</p>
<p>
  768px is the narrowest width of an iPad (arguably the most popular tablet) in portait orientation, allowing it to have a "desktop" layout. Whereas, anything below that width gets a "mobile" layout, which can be tailored to smaller screens.
</p>
<pre>/* ============================================ */
/* This file has a mobile-to-desktop breakpoint */
/* ============================================ */

$media-mobile-max: 767px !default;
$media-desktop-min: 768px !default;

@import "unsemantic-vars";
@import "unsemantic-ie-snap";

@include unsemantic-grid-placeholders;
@include unsemantic-grid-base(mobile, desktop);

@media screen and (max-width: $media-mobile-max) {
  @include unsemantic-grid-placeholders(mobile);
  @include unsemantic-grid-scoped(mobile);
}

@media screen and (min-width: $media-desktop-min) {
  @include unsemantic-grid-placeholders(desktop);
  @include unsemantic-grid-scoped(desktop);
}</pre>
<p>
  The <i>_unsemantic-grid-responsive-tablet.scss</i> file is similar, except it also adds support for a <i>tablet</i> width, between the <i>mobile</i> and <i>desktop</i> breakpoints. This file has additional variables named <code>$media-tablet-min</code> and <code>$media-tablet-max</code>. This makes for two breakpoints: 767|768 and 1024|1025.
</p>
<pre>/* ================================================================== */
/* This file has a mobile-to-tablet, and tablet-to-desktop breakpoint */
/* ================================================================== */

$media-mobile-max: 767px !default;
$media-tablet-min: 768px !default;
$media-tablet-max: 1024px !default;
$media-desktop-min: 1025px !default;

@import "unsemantic-vars";
@import "unsemantic-ie-snap";

@include unsemantic-grid-placeholders;
@include unsemantic-grid-base(mobile, tablet, desktop);

@media screen and (max-width: $media-mobile-max) {
  @include unsemantic-grid-placeholders(mobile);
  @include unsemantic-grid-scoped(mobile);
}

@media screen and (min-width: $media-tablet-min) and (max-width: $media-tablet-max) {
  @include unsemantic-grid-placeholders(tablet);
  @include unsemantic-grid-scoped(tablet);
}

@media screen and (min-width: $media-desktop-min) {
  @include unsemantic-grid-placeholders(desktop);
  @include unsemantic-grid-scoped(desktop);
}</pre>
<hr />
<h2>
  Default Variables
</h2>
<p>
  At the top of the <i>_unsemantic-vars.scss</i> file, there are several variables upon which some of the other Sass files depend. These are provided with initial values, in lieu of a specific value being defined. This is done via the <code>!default</code> keyword.
</p>
<pre>$unsemantic-ie7-support: true !default;

$unsemantic-prefix-suffix-support: true !default;

$unsemantic-push-pull-support: true !default;

$container-max-width: 1200px !default;

$gutter-half: 10px !default;

$lang-forward: left !default;

$lang-reverse: right !default;</pre>
<p>
  Since all of these values are set <i>only</i> if the variables are not already defined, to override them simply create your own <i>_vars.scss</i> partial (or name it whatever you like), and <code>@import</code> it before the any of Unsemantic's Sass files. Anything you set will take precedence, and anything you leave undefined will get a default value. Here is an example&hellip;
</p>
<pre>// ==============================
// Example application.scss file.
// ==============================

// Turn off IE7 support.
$unsemantic-ie7-support: false;

@import "partials/vars";
@import "partials/reset";
@import "partials/text";
@import "partials/site";
@import "partials/unsemantic-grid-responsive";</pre>
<p>
  The following is an explanation of what each variable pertains to.
</p>
<h3>
  $unsemantic-ie7-support
</h3>
<p>
  This variable defaults to <code>true</code>, causing code to be generated to support Internet Explorer 7. This fakes <code>box-sizing</code> and addresses some rounding errors when dealing with CSS percentages. In the respository download, there are flat CSS versions of Unsemantic with, and without, IE7 support. They are differentiated by <code>no-ie7</code> in the file name.
</p>
<p>
  You can see the differences by comparing these two files&hellip;
</p>
<ul class="list-spacing">
  <li>
    <i>IE7 support</i>
    <br />
    <a href="https://raw.github.com/nathansmith/unsemantic/master/assets/stylesheets/unsemantic-grid-responsive.css">unsemantic-grid-responsive.css</a>
  </li>
  <li>
    <i>No IE7 support</i>
    <br />
    <a href="https://raw.github.com/nathansmith/unsemantic/master/assets/stylesheets/unsemantic-grid-responsive-no-ie7.css">unsemantic-grid-responsive-no-ie7.css</a>
  </li>
</ul>
<p>
  Specifically used to patch IE7 deficiencies, <code>expression(&hellip;)</code> code is omitted from the <code>no-ie7</code> version.
</p>
<p>
  If you don't need to support IE7, just set this variable to <code>false</code> at the highest level scope. Be sure it preceeds Unsemantic's <i>*.scss</i> files in <code>@import</code> order. As a result, no CSS specific to IE7 will be generated.
</p>
<h3>
  $container-max-width
</h3>
<p>
  This is the widest that <code>grid-container</code> will go, after which it will remain at a "fixed" width. Setting a <code>max-width</code> ensures that line lengths stay within a readable range. If you'd rather this be narrower or wider, you can just create a variable with the same name, in your own <i>_vars.scss</i> file.
</p>
<h3>
  $gutter-half
</h3>
<p>
  This value controls how much padding each <code>grid-x</code> unit recieves on the left/right. It defaults to 10px. If you set this value to <code>0</code> to override the default, the corresponding <code>padding-left</code> and <code>padding-right</code> will <i>not</i> be generated in CSS (smaller file size).
</p>
<h3>
  $lang-*
</h3>
<p>
  The <code>$lang-forward</code> and <code>$lang-reverse</code> variables are to aid in writing one codebase that can be "flipped" to support either left-to-right or right-to-left languages. They default to <code>left</code> and <code>right</code> respectively (for languages like English and Spanish), but can be defined ahead of time to support right-to-left languages such as Hebrew or Arabic.
</p>
<pre>//
// For right-to-left languages.
// (Hebrew, Arabic, etc.)
//
$lang-forward: right;
$lang-reverse: left;

@import "partials/unsemantic-grid-responsive";</pre>
<p>
  Depicted above are the contents of the <i>unsemantic-grid-base-rtl.scss</i> file. This causes all <code>grid-x</code> units to float to the right, instead of to the left. It also reverses the direction of all <code>prefix-x</code>, <code>suffix-x</code>, <code>push-x</code>, and <code>pull-x</code> classes.
</p>
<hr />
<h2>
  Scope
</h2>
<p>
  Due to some changes in how the compiler works in Sass 3.3 and newer, scoped placeholders are made available by passing a single parameter to <code>unsemantic-grid-placeholders</code>.
</p>
<p>
  If you want to make these placeholders available in the global scope, that would look like this&hellip;
</p>
<pre>@import "unsemantic-vars";

@include unsemantic-grid-placeholders;

// Your code can now use %grid-container, etc.

.grid-container {
  @extend %grid-container;
}</pre>
<p>
  If you wanted to make these placeholders available within the scope of <code>@media</code> query, you could do this&hellip;
</p>
<pre>@import "unsemantic-vars";

@media screen and (max-width: 767px) {
  @include unsemantic-grid-placeholders(mobile);

  // Your code can now use %mobile-grid-50, etc.

  .mobile-grid-50 {
    @extend %mobile-grid-50;
  }
}</pre>
</pre>
<hr />
<h2>
  Placeholders
</h2>
<p>
  Everything revolves around the concept of Sass placeholder selectors (sometimes referred to as <a href="https://speakerdeck.com/anotheruiguy/sass-32-silent-classes">silent classes</a>) generated by invoking the <code>unsemantic-grid-placeholders</code> mixin contained in the <i>_unsemantic-vars.scss</i> file.
</p>
<h3>
  %grid-container
</h3>
<p>
  This is used by the <code>grid-container</code> class, and keeps the grid layout centered within the browser viewport if the browser is wider than the <code>$container-max-width</code>. It also has 10px of padding on the left/right by default.
</p>
<pre>%#{$scope}grid-container {
  @extend %#{$scope}clearfix;
  margin-left: auto;
  margin-right: auto;

  @if $container-max-width != none {
    max-width: $container-max-width;
  }

  // Set if gutter is non-zero.
  @if $gutter-half != 0 {
    padding-left: $gutter-half;
    padding-right: $gutter-half;
  }
}</pre>
<h3>
  %grid-columns-all
</h3>
<p>
  This is the placeholder extended to add left/right padding to all <code>grid-x</code> units, as well as changing their <code>box-sizing</code> to <code>border-box</code>, allowing us to have a fluid, percentage based width coupled with additional padding on each side (without increasing the overall width).
</p>
<pre>%#{$scope}grid-columns-all {
  @include box-sizing(border-box);

  // Set if gutter is non-zero.
  @if $gutter-half != 0 {
    padding-left: $gutter-half;
    padding-right: $gutter-half;
  }
}</pre>
<h3>
  %grid-parent
</h3>
<p>
  This is used by the <code>grid-parent</code> class, to zero out left/right padding on a <code>grid-x</code> unit that also contains <code>grid-x</code> children, since the child elements have their own padding already.
</p>
<pre>// Remove padding, if it's being used
// as a parent for other grid columns.
%#{$scope}grid-parent {
  padding-left: 0;
  padding-right: 0;
}</pre>
  <h3>
    %grid-columns-push-pull
  </h3>
  <p>
    This is used by all <code>push-x</code> and <code>pull-x</code> classes, which need to be relatively positioned in order for <code>left</code> and <code>right</code> offsets to have any effect. By default, all <code>grid-x</code> units inherit the browser native <code>static</code> positioning.
  </p>
  <pre>// Allows columns to be offset +/- left.
%#{$scope}grid-columns-push-pull {
  position: relative;
}</pre>
<hr />
<h2>
  Sass Loops
</h2>
<p>
  The folowing code is contained in the <codde>_unsemantic-vars.scss</codde> file. It loops through and generates placeholders for <code>%grid-x</code>, <code>%prefix-x</code>, <code>%suffix-x</code>, <code>%push-x</code>, and <code>%pull-x</code> for multiples of 5 up to 100.
</p>
<p>
  These placeholders are used when the <code>unsemantic-grid-scoped</code> mixin is invoked, where the styles are paired with classes by the same name.
</p>
<p>
  If called with a scope parameter &mdash; such as <code>mobile</code>, <code>tablet</code>, or <code>desktop</code> &mdash; then the respective placeholders that are generated would look like: <code>%mobile-grid-x</code>, <code>%tablet-grid-x</code>, and <code>%desktop-grid-x</code>.
</p>
<pre>// For 5 through 95 percent.
@for $i from 1 through 19 {
  $num: $i * 5;
  $decimal: $num / 100;
  $percent: $num * 1%;

  %#{$scope}grid-#{$num} {
    float: $lang-forward;
    width: $percent;
  }

  %#{$scope}prefix-#{$num} {
    margin-#{$lang-forward}: $percent;
  }

  %#{$scope}suffix-#{$num} {
    margin-#{$lang-reverse}: $percent;
  }

  %#{$scope}push-#{$num} {
    #{$lang-forward}: $percent;
  }

  %#{$scope}pull-#{$num} {
    #{$lang-forward}: $percent * -1;
  }
}</pre>
<p>
  This next loop does essentially the same thing as the preceeding code, except it applies to <code>%grid-33</code>, <code>%grid-66</code>, <code>%prefix-33</code>, etc.
</p>
<pre>// For one-third and two-thirds.
@for $i from 1 through 2 {
  $num: $i * 33;
  $one-third: 1 / 3;
  $decimal: $i * $one-third;
  $percent: ($num + $decimal) * 1%;

  // Percentage based widths.
  %#{$scope}grid-#{$num} {
    float: $lang-forward;
    width: $percent;
  }

  // Prefix, to add extra columns before.
  %#{$scope}prefix-#{$num} {
    margin-#{$lang-forward}: $percent;
  }

  // Suffix, to add extra columns after.
  %#{$scope}suffix-#{$num} {
    margin-#{$lang-reverse}: $percent;
  }

  // Push &amp; Pull, to rearrange column order (for potential "SEO").
  %#{$scope}push-#{$num} {
    #{$lang-forward}: $percent;
  }

  %#{$scope}pull-#{$num} {
    #{$lang-forward}: $percent * -1;
  }
}</pre>
<hr />
<h2>
  Extending
</h2>
<p>
  For these placeholders to be used, they must be called with <code>@extend</code>. If they are not used, then no code for them is ever generated. While the Unsemantic codebase itself of course makes use of all the placeholders, you could easily mix and match, generating only the CSS you need.
</p>
<p>
  Here's an example of how Unsemantic's class names make use of the various placeholders, in the <i>_unsemantic-vars.scss</i> file.
</p>
<pre>
// For 5 through 95 percent.
@for $i from 1 through 19 {
  $num: $i * 5;

  // Percentage based widths.
  .#{$class}grid-#{$num} {
    @extend %#{$scope}grid-#{$num};
  }

  // Prefix, to add extra columns before.
  .#{$class}prefix-#{$num} {
    @extend %#{$scope}prefix-#{$num};
  }

  // Suffix, to add extra columns after.
  .#{$class}suffix-#{$num} {
    @extend %#{$scope}suffix-#{$num};
  }

  // Push, to rearrange column order (for potential "SEO").
  .#{$class}push-#{$num} {
    @extend %#{$scope}push-#{$num};
  }

  // Pull, to rearrange column order (for potential "SEO").
  .#{$class}pull-#{$num} {
    @extend %#{$scope}pull-#{$num};
  }
}</pre>
<h3>
  Roll Your Own
</h3>
<p>
  However, let's say you had a simple two column layout, with a main content area and a sidebar, contained by a parent element. Presupposing this HTML&hellip;
</p>
<pre>&lt;div class="layout"&gt;
  &lt;div class="main"&gt;
    This is my main content
  &lt;/div&gt;
  &lt;div class="sidebar"&gt;
    This is my sidebar
  &lt;/div&gt;
&lt;/div&gt;</pre>
<p>
  You could generate some custom CSS by putting this in your own Sass file&hellip;
</p>
<pre>$media-mobile-max: 767px;
$media-desktop-min: 768px;
$unsemantic-ie7-support: false;

@import "partials/unsemantic-vars";
@import "partials/unsemantic-ie-snap";

/* =========== */
/* All screens */
/* =========== */

@include unsemantic-grid-placeholders;

.layout {
  @extend %grid-container;
}

.main,
.sidebar {
  @extend %grid-columns-all;
}

/* ===================== */
/* "Mobile" screen width */
/* ===================== */

@media screen and (max-width: $media-mobile-max) {
  @include unsemantic-grid-placeholders(mobile);

  .main,
  .sidebar {
    @extend %mobile-grid-100;
  }
}

/* ====================== */
/* "Desktop" screen width */
/* ====================== */

@media screen and (min-width: $media-desktop-min) {
  @include unsemantic-grid-placeholders(desktop);

  .main {
    @extend %desktop-grid-75;
  }

  .sidebar {
    @extend %desktop-grid-25;
  }
}</pre>
<p>
  That would generate just enough CSS for a mini responsive page layout&hellip;
</p>
<pre>@media screen and (max-width: 400px) {
  @-ms-viewport {
    width: 320px;
  }
}

/* =========== */
/* All screens */
/* =========== */

.layout:before,
.layout:after {
  content: ".";
  display: block;
  overflow: hidden;
  visibility: hidden;
  font-size: 0;
  line-height: 0;
  width: 0;
  height: 0;
}

.layout:after {
  clear: both;
}

.layout {
  margin-left: auto;
  margin-right: auto;
  padding-left: 10px;
  padding-right: 10px;
  max-width: 1200px;
}

.main,
.sidebar {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  padding-left: 10px;
  padding-right: 10px;
}

/* ===================== */
/* "Mobile" screen width */
/* ===================== */

@media screen and (max-width: 767px) {
  .main:before,
  .sidebar:before,
  .main:after,
  .sidebar:after {
    content: ".";
    display: block;
    overflow: hidden;
    visibility: hidden;
    font-size: 0;
    line-height: 0;
    width: 0;
    height: 0;
  }

  .main:after,
  .sidebar:after {
    clear: both;
  }

  .main,
  .sidebar {
    clear: both;
    width: 100%;
  }
}

/* ====================== */
/* "Desktop" screen width */
/* ====================== */

@media screen and (min-width: 768px) {
  .sidebar,
  .main {
    float: left;
  }

  .sidebar {
    width: 25%;
  }

  .main {
    width: 75%;
  }
}</pre>